@mixin attach-map-of-contrasting-colors($contrasting-colors-map) {
  @each $color-name in $contrasting-colors-names {
    $value: map-get($contrasting-colors-map, $color-name);

    @if ($value == null) {
      @error "-> #{$color-name} does not exist in contrasting-color-css-custom-properties-values map when dark = #{$dark}";
    }

    $color: get-contrasting-color-css-custom-property($color-name);
    $h: get-contrasting-color-css-custom-property($color-name, h);
    $s: get-contrasting-color-css-custom-property($color-name, s);
    $l: get-contrasting-color-css-custom-property($color-name, l);

    #{$h}: hue($value);
    #{$s}: saturation($value);
    #{$l}: lightness($value);
    #{$color}: $value;
  }
}

@mixin with-contrasting-colors($fill, $force: false) {
  $opacity: opacity($fill);

  @if ($opacity > 0.4 or $force) {
    $fill-is-dark: is-color-dark($fill);

    @if ($fill-is-dark == true) {
      @include attach-map-of-contrasting-colors($light-contrasting-colors);
    } @else {
      @include attach-map-of-contrasting-colors($dark-contrasting-colors);
    }
  }

  /*
    Spot style conflicts early,
    by always having 'color' set even when the contrasting colors haven't changed
  */
  color: get-contrasting-color('body');
}

@mixin inherit-contrasting-colors {
  @each $color-name in $contrasting-colors-names {
    $color: get-contrasting-color-css-custom-property($color-name);
    $h: get-contrasting-color-css-custom-property($color-name, h);
    $s: get-contrasting-color-css-custom-property($color-name, s);
    $l: get-contrasting-color-css-custom-property($color-name, l);

    #{$h}: inherit;
    #{$s}: inherit;
    #{$l}: inherit;
    #{$color}: inherit;
  }
}
